tCal2  = calibration_plot(data = P.cv2, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 2: 3-6 Months after Index Date)")
tCal2
Dev2_balanced2 = redo_frequency_on_dev(Pdev2, P2,d1 = 4, d2 = -2, eps = -2.3)
cv2 = spline_pred (Dev2_balanced2, test2,  knots = 24, pen = .4)
P.cv2 =  data.frame(p = as.numeric(cv2), y = ifelse(test2$golds=="True", 1, 0)  )
tCal2  = calibration_plot(data = P.cv2, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 2: 3-6 Months after Index Date)")
tCal2
spline_pred_dev = function(){
cv1 = spline_pred (Dev1_balanced, Mdevs$Y1)
P.cv1 =  data.frame(p = as.numeric(cv1), y = ifelse(Mdevs$Y1$golds=="True", 1, 0)  )
dCal1  = calibration_plot(data = P.cv1, obs = 'y', pred = 'p', x_lim = c(0,.1), y_lim = c(0,.1),
xlab = "Binned Pred (Interval 1: 0-3 Months after Index Date)", nTiles =10)
cv2 = spline_pred (Dev2_balanced,  Mdevs$Y2,  knots = 12, pen = 1.95)
P.cv2 =  data.frame(p = as.numeric(cv2), y = ifelse( Mdevs$Y2$golds=="True", 1, 0)  )
tCal2  = calibration_plot(data = P.cv2, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 2: 3-6 Months after Index Date)")
tCal2
cv3 = spline_pred (Dev3_balanced,  Mdevs$Y3)
P.cv3 =  data.frame(p = as.numeric(cv3), y = ifelse( Mdevs$Y3$golds=="True", 1, 0)  )
tCal3  = calibration_plot(data = P.cv3, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 3: 6-9 Months after Index Date)")
cv4 = spline_pred (Dev4_balanced, test4, knots = 29, pen = .01)
P.cv4 =  data.frame(p = as.numeric(cv4), y = ifelse(test4$golds=="True", 1, 0)  )
tCal4  = calibration_plot(data = P.cv4, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 4: 9-12 Months after Index Date)")
#tCal4
}
try_I1_Temperation = function(){
cv_logit_1 = function(Ptrain, test ){
Ptrain$pos_freq = ifelse(Ptrain$y==1,Ptrain$Freq, 1 )
train_cv = cv.glmnet(x = cbind(1, logit(Ptrain$p) ),family = 'binomial', y = Ptrain$y,  weights = (1/Ptrain$Freq)^1.25,
type.measure = 'mse' , intercept = FALSE , nfolds = 20 )
cv_pred = predict(train_cv, newx = cbind(1,  logit (test$probs)), type = 'response' )
cv_pred
}
Dev1_bal = redo_frequency_on_dev(Pdev1, P1, d1 = 3, d2= - .5, eps = -1, inflate_neg = TRUE)
cv1_test = cv_logit (Dev1_bal, test1)
P.cv =  data.frame(p = as.numeric(cv1_test), y = ifelse(test1$golds=="True", 1, 0)  )
calibration_plot(data = P.cv, obs = 'y', pred = 'p', x_lim = c(0,.25), y_lim = c(0,.25),
xlab = "Binned Pred (Interval 1: 0-3 Months after Index Date)", nTiles =10)
}
confu = function(p, yy, THRESH=.5){
CM = confusionMatrix( ifelse(p > THRESH,1,0) %>% as.factor(), yy %>% as.factor())
t(CM$table)
}
confu (P.cv1$p,  P.cv1$y,    mean ( Pdev1$y )  )
confu (P.cv2$p,  P.cv2$y,    mean ( Pdev2$y )  )
confu (P.cv3$p,  P.cv3$y,    mean ( Pdev3$y )  )
confu (P.cv4$p,  P.cv4$y,    mean ( Pdev4$y )  )
confu (P.cv1$p,  P.cv1$y,    mean ( P.cv1$y )  )
confu (P.cv2$p,  P.cv2$y,    mean ( P.cv2$y )  )
confu (P.cv3$p,  P.cv3$y,    mean ( P.cv3$y )  )
confu (P.cv4$p,  P.cv4$y,    mean ( P.cv4$y )  )
confu (P.cv1$p,  P.cv1$y,    mean (  P1[!duplicated(P1),]$y )  )
confu (P.cv2$p,  P.cv2$y,    mean (  P2[!duplicated(P2),]$y )  )
confu (P.cv3$p,  P.cv3$y,    mean (  P3[!duplicated(P3),]$y )  )
confu (P.cv4$p,  P.cv4$y,    mean (  P4[!duplicated(P4),]$y )  )
confu (P.cv1$p,  P.cv1$y,    mean (  P1[!duplicated(P1),]$y )  )
confu (P.cv2$p,  P.cv2$y,    mean (  P2[!duplicated(P2),]$y )  )
confu (P.cv3$p,  P.cv3$y,    mean (  P3[!duplicated(P3),]$y )  )
confu (P.cv4$p,  P.cv4$y,    mean (  P4[!duplicated(P4),]$y )  )
pROC::auc (P.cv1$y,  test1$probs       )
pROC::auc (P.cv2$y,  test2$probs      )
pROC::auc (P.cv3$y,  test3$probs     )
pROC::auc (P.cv4$y,  test4$probs   )
pROC::auc (P.cv1$y, P.cv1$p     )
pROC::auc (P.cv2$y,  P.cv2$p      )
pROC::auc (P.cv3$y,  P.cv3$p   )
pROC::auc (P.cv4$y,  P.cv4$p   )
grid.arrange(G12, G34, nrow = 2)
Dev4_balanced2 = redo_frequency_on_dev(Pdev4, P4,d1 = 6, d2 = 2.3, eps = -2.3)
Dev4_balanced2
#Dev4_balanced2
first_plot_Dev_balanced (Dev1_balanced2, Dev2_balanced2,
Dev3_balanced2, Dev4_balanced2)
spline_pred = function(Ptrain, test , knots = 15, pen = .75 ){
Ptrain$l = logit(Ptrain$p)
test$l = logit(test$probs)
spline = smooth.spline(x = Ptrain$l, y = Ptrain$y, w = 1/Ptrain$Freq, nknots=knots, penalty = pen  )
spl_pred = predict(spline, test$l)
spl_pred$y
}
cv1 = spline_pred (Dev1_balanced2, test1)
P.cv1 =  data.frame(p = as.numeric(cv1), y = ifelse(test1$golds=="True", 1, 0)  )
tCal1  = calibration_plot(data = P.cv1, obs = 'y', pred = 'p', x_lim = c(0,.1), y_lim = c(0,.1),
xlab = "Binned Pred (Interval 1: 0-3 Months after Index Date)", nTiles =10)
cv2 = spline_pred (Dev2_balanced2, test2,  knots = 24, pen = .4)
P.cv2 =  data.frame(p = as.numeric(cv2), y = ifelse(test2$golds=="True", 1, 0)  )
tCal2  = calibration_plot(data = P.cv2, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 2: 3-6 Months after Index Date)")
tCal2
cv3 = spline_pred (Dev3_balanced2, test3)
P.cv3 =  data.frame(p = as.numeric(cv3), y = ifelse(test3$golds=="True", 1, 0)  )
tCal3  = calibration_plot(data = P.cv3, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 3: 6-9 Months after Index Date)")
cv4 = spline_pred (Dev4_balanced2, test4, knots = 29, pen = .01)
P.cv4 =  data.frame(p = as.numeric(cv4), y = ifelse(test4$golds=="True", 1, 0)  )
tCal4  = calibration_plot(data = P.cv4, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 4: 9-12 Months after Index Date)")
G12 = grid.arrange(tCal1$calibration_plot, tCal2$calibration_plot, nrow =1)
G34 = grid.arrange(tCal3$calibration_plot, tCal4$calibration_plot, nrow = 1)
grid.arrange(G12, G34, nrow = 2)
spline_pred_dev = function(){
cv1 = spline_pred (Dev1_balanced, Mdevs$Y1)
P.cv1 =  data.frame(p = as.numeric(cv1), y = ifelse(Mdevs$Y1$golds=="True", 1, 0)  )
dCal1  = calibration_plot(data = P.cv1, obs = 'y', pred = 'p', x_lim = c(0,.1), y_lim = c(0,.1),
xlab = "Binned Pred (Interval 1: 0-3 Months after Index Date)", nTiles =10)
cv2 = spline_pred (Dev2_balanced,  Mdevs$Y2,  knots = 12, pen = 1.95)
P.cv2 =  data.frame(p = as.numeric(cv2), y = ifelse( Mdevs$Y2$golds=="True", 1, 0)  )
tCal2  = calibration_plot(data = P.cv2, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 2: 3-6 Months after Index Date)")
tCal2
cv3 = spline_pred (Dev3_balanced,  Mdevs$Y3)
P.cv3 =  data.frame(p = as.numeric(cv3), y = ifelse( Mdevs$Y3$golds=="True", 1, 0)  )
tCal3  = calibration_plot(data = P.cv3, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 3: 6-9 Months after Index Date)")
cv4 = spline_pred (Dev4_balanced, test4, knots = 29, pen = .01)
P.cv4 =  data.frame(p = as.numeric(cv4), y = ifelse(test4$golds=="True", 1, 0)  )
tCal4  = calibration_plot(data = P.cv4, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 4: 9-12 Months after Index Date)")
#tCal4
}
try_I1_Temperation = function(){
cv_logit_1 = function(Ptrain, test ){
Ptrain$pos_freq = ifelse(Ptrain$y==1,Ptrain$Freq, 1 )
train_cv = cv.glmnet(x = cbind(1, logit(Ptrain$p) ),family = 'binomial', y = Ptrain$y,  weights = (1/Ptrain$Freq)^1.25,
type.measure = 'mse' , intercept = FALSE , nfolds = 20 )
cv_pred = predict(train_cv, newx = cbind(1,  logit (test$probs)), type = 'response' )
cv_pred
}
Dev1_bal = redo_frequency_on_dev(Pdev1, P1, d1 = 3, d2= - .5, eps = -1, inflate_neg = TRUE)
cv1_test = cv_logit (Dev1_bal, test1)
P.cv =  data.frame(p = as.numeric(cv1_test), y = ifelse(test1$golds=="True", 1, 0)  )
calibration_plot(data = P.cv, obs = 'y', pred = 'p', x_lim = c(0,.25), y_lim = c(0,.25),
xlab = "Binned Pred (Interval 1: 0-3 Months after Index Date)", nTiles =10)
}
confu = function(p, yy, THRESH=.5){
CM = confusionMatrix( ifelse(p > THRESH,1,0) %>% as.factor(), yy %>% as.factor())
t(CM$table)
}
confu (P.cv1$p,  P.cv1$y,    mean ( Pdev1$y )  )
confu (P.cv2$p,  P.cv2$y,    mean ( Pdev2$y )  )
confu (P.cv3$p,  P.cv3$y,    mean ( Pdev3$y )  )
confu (P.cv4$p,  P.cv4$y,    mean ( Pdev4$y )  )
pROC::auc (P.cv1$y, P.cv1$p     )
pROC::auc (P.cv2$y,  P.cv2$p      )
pROC::auc (P.cv3$y,  P.cv3$p   )
pROC::auc (P.cv4$y,  P.cv4$p   )
#cv4 = spline_pred (Dev4_balanced2, test4, knots = 29, pen = .01)
cv4 = spline_pred (Dev4_balanced2, test4)
P.cv4 =  data.frame(p = as.numeric(cv4), y = ifelse(test4$golds=="True", 1, 0)  )
tCal4  = calibration_plot(data = P.cv4, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 4: 9-12 Months after Index Date)")
G12 = grid.arrange(tCal1$calibration_plot, tCal2$calibration_plot, nrow =1)
G34 = grid.arrange(tCal3$calibration_plot, tCal4$calibration_plot, nrow = 1)
grid.arrange(G12, G34, nrow = 2)
cv4 = spline_pred (Dev4_balanced2, test4, knots = 9, pen = .01)
cv4 = spline_pred (Dev4_balanced2, test4)
P.cv4 =  data.frame(p = as.numeric(cv4), y = ifelse(test4$golds=="True", 1, 0)  )
tCal4  = calibration_plot(data = P.cv4, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 4: 9-12 Months after Index Date)")
G12 = grid.arrange(tCal1$calibration_plot, tCal2$calibration_plot, nrow =1)
G34 = grid.arrange(tCal3$calibration_plot, tCal4$calibration_plot, nrow = 1)
grid.arrange(G12, G34, nrow = 2)
cv4 = spline_pred (Dev4_balanced2, test4, knots = 9, pen = 10)
cv4 = spline_pred (Dev4_balanced2, test4)
P.cv4 =  data.frame(p = as.numeric(cv4), y = ifelse(test4$golds=="True", 1, 0)  )
tCal4  = calibration_plot(data = P.cv4, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 4: 9-12 Months after Index Date)")
G12 = grid.arrange(tCal1$calibration_plot, tCal2$calibration_plot, nrow =1)
G34 = grid.arrange(tCal3$calibration_plot, tCal4$calibration_plot, nrow = 1)
grid.arrange(G12, G34, nrow = 2)
cv4 = spline_pred (Dev4_balanced2, test4, knots = 9, pen = .01)
cv4 = spline_pred (Dev4_balanced2, test4)
P.cv4 =  data.frame(p = as.numeric(cv4), y = ifelse(test4$golds=="True", 1, 0)  )
tCal4  = calibration_plot(data = P.cv4, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 4: 9-12 Months after Index Date)")
G12 = grid.arrange(tCal1$calibration_plot, tCal2$calibration_plot, nrow =1)
G34 = grid.arrange(tCal3$calibration_plot, tCal4$calibration_plot, nrow = 1)
grid.arrange(G12, G34, nrow = 2)
cv4 = spline_pred (Dev4_balanced2, test4, knots = 5, pen = .01)
cv4 = spline_pred (Dev4_balanced2, test4)
P.cv4 =  data.frame(p = as.numeric(cv4), y = ifelse(test4$golds=="True", 1, 0)  )
tCal4  = calibration_plot(data = P.cv4, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 4: 9-12 Months after Index Date)")
G12 = grid.arrange(tCal1$calibration_plot, tCal2$calibration_plot, nrow =1)
G34 = grid.arrange(tCal3$calibration_plot, tCal4$calibration_plot, nrow = 1)
grid.arrange(G12, G34, nrow = 2)
cv4 = spline_pred (Dev4_balanced2, test4, knots = 5, pen = 1.6)
cv4 = spline_pred (Dev4_balanced2, test4)
P.cv4 =  data.frame(p = as.numeric(cv4), y = ifelse(test4$golds=="True", 1, 0)  )
tCal4  = calibration_plot(data = P.cv4, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 4: 9-12 Months after Index Date)")
G12 = grid.arrange(tCal1$calibration_plot, tCal2$calibration_plot, nrow =1)
G34 = grid.arrange(tCal3$calibration_plot, tCal4$calibration_plot, nrow = 1)
grid.arrange(G12, G34, nrow = 2)
cv4 = spline_pred (Dev4_balanced2, test4, knots = 35, pen = .01)
cv4 = spline_pred (Dev4_balanced2, test4)
P.cv4 =  data.frame(p = as.numeric(cv4), y = ifelse(test4$golds=="True", 1, 0)  )
tCal4  = calibration_plot(data = P.cv4, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 4: 9-12 Months after Index Date)")
G12 = grid.arrange(tCal1$calibration_plot, tCal2$calibration_plot, nrow =1)
G34 = grid.arrange(tCal3$calibration_plot, tCal4$calibration_plot, nrow = 1)
grid.arrange(G12, G34, nrow = 2)
#Dev4_balanced2
first_plot_Dev_balanced (Dev1_balanced2, Dev2_balanced2,
Dev3_balanced2, Dev4_balanced2)
Dev4_balanced2 = redo_frequency_on_dev(Pdev4, P4,d1 = 3, d2 = 2.3, eps = -2.3)
#Dev4_balanced2
first_plot_Dev_balanced (Dev1_balanced2, Dev2_balanced2,
Dev3_balanced2, Dev4_balanced2)
spline_pred = function(Ptrain, test , knots = 15, pen = .75 ){
Ptrain$l = logit(Ptrain$p)
test$l = logit(test$probs)
spline = smooth.spline(x = Ptrain$l, y = Ptrain$y, w = 1/Ptrain$Freq, nknots=knots, penalty = pen  )
spl_pred = predict(spline, test$l)
spl_pred$y
}
Dev4_balanced2 = redo_frequency_on_dev(Pdev4, P4,d1 = 3, d2 = -3, eps = -2.3)
Dev4_balanced2 = redo_frequency_on_dev(Pdev4, P4,d1 = 3, d2 = -2, eps = -2.3)
#Dev4_balanced2
first_plot_Dev_balanced (Dev1_balanced2, Dev2_balanced2,
Dev3_balanced2, Dev4_balanced2)
Dev4_balanced2 = redo_frequency_on_dev(Pdev4, P4,d1 = 3, d2 = 2, eps = -2.3)
#Dev4_balanced2
first_plot_Dev_balanced (Dev1_balanced2, Dev2_balanced2,
Dev3_balanced2, Dev4_balanced2)
cv4 = spline_pred (Dev4_balanced2, test4, knots = 35, pen = .01)
P.cv4 =  data.frame(p = as.numeric(cv4), y = ifelse(test4$golds=="True", 1, 0)  )
tCal4  = calibration_plot(data = P.cv4, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 4: 9-12 Months after Index Date)")
G12 = grid.arrange(tCal1$calibration_plot, tCal2$calibration_plot, nrow =1)
G34 = grid.arrange(tCal3$calibration_plot, tCal4$calibration_plot, nrow = 1)
grid.arrange(G12, G34, nrow = 2)
confu (P.cv1$p,  P.cv1$y,    mean ( Pdev1$y )  )
confu (P.cv2$p,  P.cv2$y,    mean ( Pdev2$y )  )
confu (P.cv3$p,  P.cv3$y,    mean ( Pdev3$y )  )
confu (P.cv4$p,  P.cv4$y,    mean ( Pdev4$y )  )
pROC::auc (P.cv4$y,  P.cv4$p   )
cv4 = spline_pred (Dev4_balanced2, test4, knots = 5, pen = .01)
P.cv4 =  data.frame(p = as.numeric(cv4), y = ifelse(test4$golds=="True", 1, 0)  )
tCal4  = calibration_plot(data = P.cv4, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 4: 9-12 Months after Index Date)")
G12 = grid.arrange(tCal1$calibration_plot, tCal2$calibration_plot, nrow =1)
G34 = grid.arrange(tCal3$calibration_plot, tCal4$calibration_plot, nrow = 1)
grid.arrange(G12, G34, nrow = 2)
pROC::auc (P.cv4$y,  P.cv4$p   )
pROC::auc (P.cv4$y,  test4$probs   )
pROC::auc (P.cv4$y,  P.cv4$p   )
confu (P.cv1$p,  P.cv1$y,    mean ( Pdev1$y )  )
confu (P.cv2$p,  P.cv2$y,    mean ( Pdev2$y )  )
confu (P.cv3$p,  P.cv3$y,    mean ( Pdev3$y )  )
confu (P.cv4$p,  P.cv4$y,    mean ( Pdev4$y )  )
pROC::auc (P.cv1$y,  test1$probs       )
pROC::auc (P.cv2$y,  test2$probs      )
pROC::auc (P.cv3$y,  test3$probs     )
pROC::auc (P.cv4$y,  test4$probs   )
c(pROC::auc (P.cv1$y,  test1$probs),pROC::auc (P.cv2$y,  test2$probs),
pROC::auc (P.cv3$y,  test3$probs), pROC::auc (P.cv4$y,  test4$probs )  )
c(pROC::auc (P.cv1$y, P.cv1$p ), pROC::auc (P.cv2$y,  P.cv2$p),
pROC::auc (P.cv3$y,  P.cv3$p), pROC::auc (P.cv4$y,  P.cv4$p))
#Dev4_balanced2
first_plot_Dev_balanced (Dev1_balanced2, Dev2_balanced2,
Dev3_balanced2, Dev4_balanced2)
Dev2_balanced2 = redo_frequency_on_dev(Pdev2, P2,d1 = 4, d2 = -1, eps = -2.3)
Dev3_balanced2 = redo_frequency_on_dev(Pdev3, P3,d1 = 4, d2 = -1, eps = -2)
Dev4_balanced2 = redo_frequency_on_dev(Pdev4, P4,d1 = 3, d2 = 2, eps = -2.3)
#Dev4_balanced2
first_plot_Dev_balanced (Dev1_balanced2, Dev2_balanced2,
Dev3_balanced2, Dev4_balanced2)
spline_pred = function(Ptrain, test , knots = 15, pen = .75 ){
Ptrain$l = logit(Ptrain$p)
test$l = logit(test$probs)
spline = smooth.spline(x = Ptrain$l, y = Ptrain$y, w = 1/Ptrain$Freq, nknots=knots, penalty = pen  )
spl_pred = predict(spline, test$l)
spl_pred$y
}
cv1 = spline_pred (Dev1_balanced2, test1)
P.cv1 =  data.frame(p = as.numeric(cv1), y = ifelse(test1$golds=="True", 1, 0)  )
tCal1  = calibration_plot(data = P.cv1, obs = 'y', pred = 'p', x_lim = c(0,.1), y_lim = c(0,.1),
xlab = "Binned Pred (Interval 1: 0-3 Months after Index Date)", nTiles =10)
cv2 = spline_pred (Dev2_balanced2, test2,  knots = 24, pen = .4)
P.cv2 =  data.frame(p = as.numeric(cv2), y = ifelse(test2$golds=="True", 1, 0)  )
tCal2  = calibration_plot(data = P.cv2, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 2: 3-6 Months after Index Date)")
tCal2
cv3 = spline_pred (Dev3_balanced2, test3)
P.cv3 =  data.frame(p = as.numeric(cv3), y = ifelse(test3$golds=="True", 1, 0)  )
tCal3  = calibration_plot(data = P.cv3, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 3: 6-9 Months after Index Date)")
cv4 = spline_pred (Dev4_balanced2, test4, knots = 5, pen = .01)
#cv4 = spline_pred (Dev4_balanced2, test4)
P.cv4 =  data.frame(p = as.numeric(cv4), y = ifelse(test4$golds=="True", 1, 0)  )
tCal4  = calibration_plot(data = P.cv4, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 4: 9-12 Months after Index Date)")
#tCal4
G12 = grid.arrange(tCal1$calibration_plot, tCal2$calibration_plot, nrow =1)
G34 = grid.arrange(tCal3$calibration_plot, tCal4$calibration_plot, nrow = 1)
grid.arrange(G12, G34, nrow = 2)
cv2 = spline_pred (Dev2_balanced2, test2 )
P.cv2 =  data.frame(p = as.numeric(cv2), y = ifelse(test2$golds=="True", 1, 0)  )
tCal2  = calibration_plot(data = P.cv2, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 2: 3-6 Months after Index Date)")
tCal2
cv3 = spline_pred (Dev3_balanced2, test3)
P.cv3 =  data.frame(p = as.numeric(cv3), y = ifelse(test3$golds=="True", 1, 0)  )
tCal3  = calibration_plot(data = P.cv3, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 3: 6-9 Months after Index Date)")
cv4 = spline_pred (Dev4_balanced2, test4, knots = 5, pen = .01)
#cv4 = spline_pred (Dev4_balanced2, test4)
P.cv4 =  data.frame(p = as.numeric(cv4), y = ifelse(test4$golds=="True", 1, 0)  )
tCal4  = calibration_plot(data = P.cv4, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 4: 9-12 Months after Index Date)")
#tCal4
G12 = grid.arrange(tCal1$calibration_plot, tCal2$calibration_plot, nrow =1)
G34 = grid.arrange(tCal3$calibration_plot, tCal4$calibration_plot, nrow = 1)
grid.arrange(G12, G34, nrow = 2)
c(pROC::auc (P.cv1$y, P.cv1$p ), pROC::auc (P.cv2$y,  P.cv2$p),
pROC::auc (P.cv3$y,  P.cv3$p), pROC::auc (P.cv4$y,  P.cv4$p))
c(pROC::auc (P.cv1$y,  test1$probs),pROC::auc (P.cv2$y,  test2$probs),
pROC::auc (P.cv3$y,  test3$probs), pROC::auc (P.cv4$y,  test4$probs )  )
spline_pred_dev = function(){
cv1 = spline_pred (Dev1_balanced, Mdevs$Y1)
P.cv1 =  data.frame(p = as.numeric(cv1), y = ifelse(Mdevs$Y1$golds=="True", 1, 0)  )
dCal1  = calibration_plot(data = P.cv1, obs = 'y', pred = 'p', x_lim = c(0,.1), y_lim = c(0,.1),
xlab = "Binned Pred (Interval 1: 0-3 Months after Index Date)", nTiles =10)
cv2 = spline_pred (Dev2_balanced,  Mdevs$Y2,  knots = 12, pen = 1.95)
P.cv2 =  data.frame(p = as.numeric(cv2), y = ifelse( Mdevs$Y2$golds=="True", 1, 0)  )
tCal2  = calibration_plot(data = P.cv2, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 2: 3-6 Months after Index Date)")
tCal2
cv3 = spline_pred (Dev3_balanced,  Mdevs$Y3)
P.cv3 =  data.frame(p = as.numeric(cv3), y = ifelse( Mdevs$Y3$golds=="True", 1, 0)  )
tCal3  = calibration_plot(data = P.cv3, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 3: 6-9 Months after Index Date)")
cv4 = spline_pred (Dev4_balanced, test4, knots = 29, pen = .01)
P.cv4 =  data.frame(p = as.numeric(cv4), y = ifelse(test4$golds=="True", 1, 0)  )
tCal4  = calibration_plot(data = P.cv4, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 4: 9-12 Months after Index Date)")
#tCal4
}
try_I1_Temperation = function(){
cv_logit_1 = function(Ptrain, test ){
Ptrain$pos_freq = ifelse(Ptrain$y==1,Ptrain$Freq, 1 )
train_cv = cv.glmnet(x = cbind(1, logit(Ptrain$p) ),family = 'binomial', y = Ptrain$y,  weights = (1/Ptrain$Freq)^1.25,
type.measure = 'mse' , intercept = FALSE , nfolds = 20 )
cv_pred = predict(train_cv, newx = cbind(1,  logit (test$probs)), type = 'response' )
cv_pred
}
Dev1_bal = redo_frequency_on_dev(Pdev1, P1, d1 = 3, d2= - .5, eps = -1, inflate_neg = TRUE)
cv1_test = cv_logit (Dev1_bal, test1)
P.cv =  data.frame(p = as.numeric(cv1_test), y = ifelse(test1$golds=="True", 1, 0)  )
calibration_plot(data = P.cv, obs = 'y', pred = 'p', x_lim = c(0,.25), y_lim = c(0,.25),
xlab = "Binned Pred (Interval 1: 0-3 Months after Index Date)", nTiles =10)
}
confu = function(p, yy, THRESH=.5){
CM = confusionMatrix( ifelse(p > THRESH,1,0) %>% as.factor(), yy %>% as.factor())
t(CM$table)
}
confu (P.cv1$p,  P.cv1$y,    mean ( Pdev1$y )  )
confu (P.cv2$p,  P.cv2$y,    mean ( Pdev2$y )  )
confu (P.cv3$p,  P.cv3$y,    mean ( Pdev3$y )  )
confu (P.cv4$p,  P.cv4$y,    mean ( Pdev4$y )  )
c(pROC::auc (P.cv1$y,  test1$probs),pROC::auc (P.cv2$y,  test2$probs),
pROC::auc (P.cv3$y,  test3$probs), pROC::auc (P.cv4$y,  test4$probs )  )
confu (P.cv1$p,  P.cv1$y,    mean ( P.cv1$y )  )
confu (P.cv2$p,  P.cv2$y,    mean ( P.cv2$y )  )
confu (P.cv3$p,  P.cv3$y,    mean ( P.cv3$y )  )
confu (P.cv4$p,  P.cv4$y,    mean ( P.cv4$y )  )
Dev1_balanced2 = redo_frequency_on_dev(Pdev1, P1, d1 = 5, d2 = .5, eps = -2)
Dev2_balanced2 = redo_frequency_on_dev(Pdev2, P2,d1 = 4, d2 = -1, eps = -1.3)
Dev3_balanced2 = redo_frequency_on_dev(Pdev3, P3,d1 = 4, d2 = -1, eps = -2)
Dev4_balanced2 = redo_frequency_on_dev(Pdev4, P4,d1 = 3, d2 = 2, eps = -2.3)
#Dev4_balanced2
first_plot_Dev_balanced (Dev1_balanced2, Dev2_balanced2,    Dev3_balanced2, Dev4_balanced2)
spline_pred = function(Ptrain, test , knots = 15, pen = .75 ){
Ptrain$l = logit(Ptrain$p)
test$l = logit(test$probs)
spline = smooth.spline(x = Ptrain$l, y = Ptrain$y, w = 1/Ptrain$Freq, nknots=knots, penalty = pen  )
spl_pred = predict(spline, test$l)
spl_pred$y
}
cv1 = spline_pred (Dev1_balanced2, test1)
P.cv1 =  data.frame(p = as.numeric(cv1), y = ifelse(test1$golds=="True", 1, 0)  )
tCal1  = calibration_plot(data = P.cv1, obs = 'y', pred = 'p', x_lim = c(0,.1), y_lim = c(0,.1),
xlab = "Binned Pred (Interval 1: 0-3 Months after Index Date)", nTiles =10)
cv2 = spline_pred (Dev2_balanced2, test2,  knots = 24, pen = .4)
cv2 = spline_pred (Dev2_balanced2, test2 )
P.cv2 =  data.frame(p = as.numeric(cv2), y = ifelse(test2$golds=="True", 1, 0)  )
tCal2  = calibration_plot(data = P.cv2, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 2: 3-6 Months after Index Date)")
tCal2
cv3 = spline_pred (Dev3_balanced2, test3)
P.cv3 =  data.frame(p = as.numeric(cv3), y = ifelse(test3$golds=="True", 1, 0)  )
tCal3  = calibration_plot(data = P.cv3, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 3: 6-9 Months after Index Date)")
cv4 = spline_pred (Dev4_balanced2, test4, knots = 5, pen = .01)
#cv4 = spline_pred (Dev4_balanced2, test4)
P.cv4 =  data.frame(p = as.numeric(cv4), y = ifelse(test4$golds=="True", 1, 0)  )
tCal4  = calibration_plot(data = P.cv4, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 4: 9-12 Months after Index Date)")
#tCal4
G12 = grid.arrange(tCal1$calibration_plot, tCal2$calibration_plot, nrow =1)
G34 = grid.arrange(tCal3$calibration_plot, tCal4$calibration_plot, nrow = 1)
grid.arrange(G12, G34, nrow = 2)
Dev2_balanced2 = redo_frequency_on_dev(Pdev2, P2,d1 = 6, d2 = -1, eps = -1.3)
P.cv2 =  data.frame(p = as.numeric(cv2), y = ifelse(test2$golds=="True", 1, 0)  )
tCal2  = calibration_plot(data = P.cv2, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 2: 3-6 Months after Index Date)")
cv2 = spline_pred (Dev2_balanced2, test2 )
P.cv2 =  data.frame(p = as.numeric(cv2), y = ifelse(test2$golds=="True", 1, 0)  )
tCal2  = calibration_plot(data = P.cv2, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 2: 3-6 Months after Index Date)")
tCal2
cv2 = spline_pred (Dev2_balanced2, test2,  knots = 24, pen = .4)
P.cv2 =  data.frame(p = as.numeric(cv2), y = ifelse(test2$golds=="True", 1, 0)  )
tCal2  = calibration_plot(data = P.cv2, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 2: 3-6 Months after Index Date)")
tCal2
cv2 = spline_pred (Dev2_balanced2, test2,  knots = 24, pen = 1.4)
cv2 = spline_pred (Dev2_balanced2, test2 )
P.cv2 =  data.frame(p = as.numeric(cv2), y = ifelse(test2$golds=="True", 1, 0)  )
tCal2  = calibration_plot(data = P.cv2, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 2: 3-6 Months after Index Date)")
cv2 = spline_pred (Dev2_balanced2, test2,  knots = 24, pen = 1.4)
P.cv2 =  data.frame(p = as.numeric(cv2), y = ifelse(test2$golds=="True", 1, 0)  )
tCal2  = calibration_plot(data = P.cv2, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 2: 3-6 Months after Index Date)")
tCal2
cv2 = spline_pred (Dev2_balanced2, test2,  knots = 24, pen = .1)
P.cv2 =  data.frame(p = as.numeric(cv2), y = ifelse(test2$golds=="True", 1, 0)  )
tCal2  = calibration_plot(data = P.cv2, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 2: 3-6 Months after Index Date)")
tCal2
cv2 = spline_pred (Dev2_balanced2, test2,  knots = 34, pen = .1)
P.cv2 =  data.frame(p = as.numeric(cv2), y = ifelse(test2$golds=="True", 1, 0)  )
tCal2  = calibration_plot(data = P.cv2, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 2: 3-6 Months after Index Date)")
tCal2
cv2 = spline_pred (Dev2_balanced2, test2,  knots = 34, pen = 3.1)
P.cv2 =  data.frame(p = as.numeric(cv2), y = ifelse(test2$golds=="True", 1, 0)  )
tCal2  = calibration_plot(data = P.cv2, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 2: 3-6 Months after Index Date)")
tCal2
Dev2_balanced2 = redo_frequency_on_dev(Pdev2, P2,d1 = 6, d2 = 1, eps = -1.3)
cv2 = spline_pred (Dev2_balanced2, test2,  knots = 34, pen = 3.1)
P.cv2 =  data.frame(p = as.numeric(cv2), y = ifelse(test2$golds=="True", 1, 0)  )
tCal2  = calibration_plot(data = P.cv2, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 2: 3-6 Months after Index Date)")
tCal2
cv2 = spline_pred (Dev2_balanced2, test2,  knots = 14, pen = 3.1)
P.cv2 =  data.frame(p = as.numeric(cv2), y = ifelse(test2$golds=="True", 1, 0)  )
tCal2  = calibration_plot(data = P.cv2, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 2: 3-6 Months after Index Date)")
tCal2
cv2 = spline_pred (Dev2_balanced2, test2,  knots = 14, pen =  .1)
P.cv2 =  data.frame(p = as.numeric(cv2), y = ifelse(test2$golds=="True", 1, 0)  )
tCal2  = calibration_plot(data = P.cv2, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 2: 3-6 Months after Index Date)")
tCal2
G12 = grid.arrange(tCal1$calibration_plot, tCal2$calibration_plot, nrow =1)
G34 = grid.arrange(tCal3$calibration_plot, tCal4$calibration_plot, nrow = 1)
grid.arrange(G12, G34, nrow = 2)
c(pROC::auc (P.cv1$y, P.cv1$p ), pROC::auc (P.cv2$y,  P.cv2$p),
pROC::auc (P.cv3$y,  P.cv3$p), pROC::auc (P.cv4$y,  P.cv4$p))
c(pROC::auc (P.cv1$y,  test1$probs),pROC::auc (P.cv2$y,  test2$probs),
pROC::auc (P.cv3$y,  test3$probs), pROC::auc (P.cv4$y,  test4$probs )  )
spline_pred_dev = function(){
cv1 = spline_pred (Dev1_balanced, Mdevs$Y1)
P.cv1 =  data.frame(p = as.numeric(cv1), y = ifelse(Mdevs$Y1$golds=="True", 1, 0)  )
dCal1  = calibration_plot(data = P.cv1, obs = 'y', pred = 'p', x_lim = c(0,.1), y_lim = c(0,.1),
xlab = "Binned Pred (Interval 1: 0-3 Months after Index Date)", nTiles =10)
cv2 = spline_pred (Dev2_balanced,  Mdevs$Y2,  knots = 12, pen = 1.95)
P.cv2 =  data.frame(p = as.numeric(cv2), y = ifelse( Mdevs$Y2$golds=="True", 1, 0)  )
tCal2  = calibration_plot(data = P.cv2, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 2: 3-6 Months after Index Date)")
tCal2
cv3 = spline_pred (Dev3_balanced,  Mdevs$Y3)
P.cv3 =  data.frame(p = as.numeric(cv3), y = ifelse( Mdevs$Y3$golds=="True", 1, 0)  )
tCal3  = calibration_plot(data = P.cv3, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 3: 6-9 Months after Index Date)")
cv4 = spline_pred (Dev4_balanced, test4, knots = 29, pen = .01)
P.cv4 =  data.frame(p = as.numeric(cv4), y = ifelse(test4$golds=="True", 1, 0)  )
tCal4  = calibration_plot(data = P.cv4, obs = 'y', pred = 'p', x_lim = c(0,.05), y_lim = c(0,.05),
xlab = "Binned Pred (Interval 4: 9-12 Months after Index Date)")
#tCal4
}
try_I1_Temperation = function(){
cv_logit_1 = function(Ptrain, test ){
Ptrain$pos_freq = ifelse(Ptrain$y==1,Ptrain$Freq, 1 )
train_cv = cv.glmnet(x = cbind(1, logit(Ptrain$p) ),family = 'binomial', y = Ptrain$y,  weights = (1/Ptrain$Freq)^1.25,
type.measure = 'mse' , intercept = FALSE , nfolds = 20 )
cv_pred = predict(train_cv, newx = cbind(1,  logit (test$probs)), type = 'response' )
cv_pred
}
Dev1_bal = redo_frequency_on_dev(Pdev1, P1, d1 = 3, d2= - .5, eps = -1, inflate_neg = TRUE)
cv1_test = cv_logit (Dev1_bal, test1)
P.cv =  data.frame(p = as.numeric(cv1_test), y = ifelse(test1$golds=="True", 1, 0)  )
calibration_plot(data = P.cv, obs = 'y', pred = 'p', x_lim = c(0,.25), y_lim = c(0,.25),
xlab = "Binned Pred (Interval 1: 0-3 Months after Index Date)", nTiles =10)
}
confu = function(p, yy, THRESH=.5){
CM = confusionMatrix( ifelse(p > THRESH,1,0) %>% as.factor(), yy %>% as.factor())
t(CM$table)
}
confu (P.cv1$p,  P.cv1$y,    mean ( Pdev1$y )  )
confu (P.cv2$p,  P.cv2$y,    mean ( Pdev2$y )  )
confu (P.cv3$p,  P.cv3$y,    mean ( Pdev3$y )  )
confu (P.cv4$p,  P.cv4$y,    mean ( Pdev4$y )  )
grid.arrange(G12, G34, nrow = 1)
